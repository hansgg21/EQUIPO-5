package com.mycompany.juego_de_reyes_ma; 
 
import javax.swing.*; import java.awt.*; import java.awt.event.ActionEvent; import java.util.ArrayList; import java.util.List; 
 
public class JuegoDeReyesGUI {     private static JTextArea areaTexto;     private static JLabel barraEstado;     private static JProgressBar barraSalud; 
 
    public static void main(String[] args) {         JFrame frame = new JFrame("Juego de Reyes");         frame.setSize(800, 600);         frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         frame.setLayout(new BorderLayout()); 
 
        JPanel panelBarraEstado = new JPanel(new BorderLayout());         barraEstado = new JLabel("Salud: 100 | Nivel: 1 | Ataque: 15 | Defensa: 5");         barraEstado.setHorizontalAlignment(SwingConstants.CENTER);         barraEstado.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 0)); 
 
        JLabel imagenJugador = new JLabel(new 
ImageIcon(JuegoDeReyesGUI.class.getResource("/images/jugador.png")));         panelBarraEstado.add(imagenJugador, BorderLayout.WEST); 
         
        panelBarraEstado.add(barraEstado, BorderLayout.CENTER); 
 
        barraSalud = new JProgressBar(0, 100); // Valor máximo igual a la salud inicial del personaje         barraSalud.setValue(100);         barraSalud.setStringPainted(true);         panelBarraEstado.add(barraSalud, BorderLayout.SOUTH); 
 
        frame.add(panelBarraEstado, BorderLayout.NORTH); 
 
        JPanel panelJuego = new JPanel(); 
        panelJuego.setBorder(BorderFactory.createLineBorder(Color.BLACK));         JLabel labelJuego = new JLabel("Aquí va la representación visual del juego");         panelJuego.add(labelJuego);         frame.add(panelJuego, BorderLayout.CENTER); 
 
        areaTexto = new JTextArea(10, 50);         areaTexto.setEditable(false); 
        JScrollPane scroll = new JScrollPane(areaTexto);         frame.add(scroll, BorderLayout.EAST); 
 
        JPanel panelBotones = new JPanel();         frame.add(panelBotones, BorderLayout.SOUTH); 
 
        Personaje luigi = new Personaje("Luigi", 100, 15, 5); 
        Enemigo mbappe = new Enemigo("Mbappé", 50, 10, 2); 
        Pocion pocionHuesoDePlatano = new Pocion("Hueso de Plátano", 20); 
        Arma armaForyfay = new Arma("Foryfay", 5); 
        Mapa mundoDeLasMaravillas = new Mapa("Mundo de las Maravillas");         mundoDeLasMaravillas.agregarEnemigo(mbappe);         areaTexto.append("Explorando en: " + mundoDeLasMaravillas.getNombre() + "\n"); 
 
        JButton botonAtacar = new JButton("Atacar"); 
        JButton botonUsarPocion = new JButton("Usar Poción"); 
        JButton botonUsarArma = new JButton("Equipar Arma"); 
 
        botonAtacar.setBackground(Color.RED);         botonAtacar.setForeground(Color.WHITE);         botonUsarPocion.setBackground(Color.GREEN);         botonUsarPocion.setForeground(Color.WHITE);         botonUsarArma.setBackground(Color.BLUE);         botonUsarArma.setForeground(Color.WHITE); 
 
        panelBotones.add(botonAtacar);         panelBotones.add(botonUsarPocion);         panelBotones.add(botonUsarArma); 
 
        botonAtacar.addActionListener(e -> realizarBatalla(luigi, mbappe));         botonUsarPocion.addActionListener(e -> {             pocionHuesoDePlatano.usar(luigi, areaTexto);             actualizarBarraEstado(luigi); 
        }); 
        botonUsarArma.addActionListener((ActionEvent e) -> {             armaForyfay.usar(luigi, areaTexto);             actualizarBarraEstado(luigi); 
        }); 
 
        frame.setVisible(true); 
    } 
 
    private static void realizarBatalla(Personaje atacante, Enemigo defensor) {         if (atacante.estaVivo() && defensor.estaVivo()) {             atacante.atacar(defensor, areaTexto);             if (defensor.estaVivo()) {                 defensor.atacar(atacante, areaTexto);                 actualizarBarraEstado(atacante); 
            } else { 
                areaTexto.append(defensor.getNombre() + " ha sido derrotado.\n"); 
            } 
        } else { 
            areaTexto.append("No se puede realizar la batalla. Alguien está muerto.\n"); 
        } 
    } 
 
    private static void actualizarBarraEstado(Personaje personaje) {         barraEstado.setText(String.format("Salud: %d | Ataque: %d | Defensa: %d", personaje.getSalud(), personaje.getAtaque(), personaje.getDefensa()));         barraSalud.setMaximum(personaje.getSaludMaxima());         barraSalud.setValue(personaje.getSalud()); 
    } 
 
    public static class Personaje {         private final String nombre;         private int salud;         private final int saludMaxima;         private int ataque;         private final int defensa;         public Personaje(String nombre, int salud, int ataque, int defensa) {             this.nombre = nombre;             this.salud = salud;             this.saludMaxima = salud;             this.ataque = ataque;             this.defensa = defensa; 
        } 
 
        public boolean estaVivo() {             return salud > 0; 
        } 
 
        public void atacar(Enemigo enemigo, JTextArea areaTexto) {             int dano = Math.max(ataque - enemigo.getDefensa(), 0);             enemigo.recibirDano(dano);             areaTexto.append(nombre + " ataca a " + enemigo.getNombre() + " causando " + dano + " puntos de daño.\n"); 
        } 
 
        public void recibirDano(int dano) {             salud = Math.max(salud - dano, 0); 
        } 
 
        public String getNombre() {             return nombre; 
        } 
 
        public int getSalud() { 
            return salud; 
        } 
 
        public int getSaludMaxima() {             return saludMaxima; 
        } 
 
        public int getAtaque() {             return ataque; 
        } 
 
        public int getDefensa() {             return defensa; 
        } 
    } 
 
    public static class Enemigo {         private final String nombre;         private int salud;         private final int ataque;         private final int defensa; 
 
        public Enemigo(String nombre, int salud, int ataque, int defensa) {             this.nombre = nombre;             this.salud = salud;             this.ataque = ataque;             this.defensa = defensa; 
        } 
 
        public boolean estaVivo() {             return salud > 0; 
        } 
 
        public void atacar(Personaje personaje, JTextArea areaTexto) {             int dano = Math.max(ataque - personaje.getDefensa(), 0);             personaje.recibirDano(dano);             areaTexto.append(nombre + " ataca a " + personaje.getNombre() + " causando " + dano + " puntos de daño.\n"); 
        } 
 
        public void recibirDano(int dano) {             salud = Math.max(salud - dano, 0); 
        } 
 
        public String getNombre() {             return nombre; 
        } 
 
        public int getDefensa() {             return defensa; 
        } 
    } 
 
    public static class Pocion {         private final String nombre;         private final int puntosRestauracion; 
 
        public Pocion(String nombre, int puntosRestauracion) { 
            this.nombre = nombre;             this.puntosRestauracion = puntosRestauracion; 
        } 
 
        public void usar(Personaje personaje, JTextArea areaTexto) {             personaje.recibirDano(-puntosRestauracion); // Restaura salud             areaTexto.append(personaje.getNombre() + " ha usado " + nombre + " y ha restaurado " + puntosRestauracion + " puntos de salud.\n"); 
        } 
    } 
 
    public static class Arma {         private final String nombre;         private final int puntosAtaque; 
 
        public Arma(String nombre, int puntosAtaque) {             this.nombre = nombre;             this.puntosAtaque = puntosAtaque; 
        } 
 
        public void usar(Personaje personaje, JTextArea areaTexto) {             personaje.ataque += puntosAtaque;             areaTexto.append(personaje.getNombre() + " ha equipado el arma " + nombre + " y ha aumentado su ataque en " + puntosAtaque + " puntos.\n"); 
        } 
    } 
 
    public static class Mapa {         private final String nombre;         private final List<Enemigo> enemigos;         public Mapa(String nombre) {             this.nombre = nombre;             this.enemigos = new ArrayList<>(); 
        } 
 
        public String getNombre() {             return nombre; 
        } 
 
        public void agregarEnemigo(Enemigo enemigo) {             enemigos.add(enemigo); 
        } 
    } 
} 
